
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped, Twist
from nav_msgs.msg import Path
import tf2_ros
import numpy as np
import json
import math

def sgn(val):
    return -1 if val < 0 else 1

def pt_to_pt_distance(pt1, pt2):
    return math.sqrt((pt1[0] - pt2[0])**2 + (pt1[1] - pt2[1])**2)

def convert_to_array(path):
        """Converts the path (list of lists) to a NumPy array and multiplies each point by 0.05.
        """
        # Convert the path to a NumPy array
        path_array = np.array(path) * 0.05

        path_array -= np.array([2.54, 2.35])
    
        # Remove duplicate points
        unique_path = []
        for point in path_array:
            if not any(np.array_equal(point, existing_point) for existing_point in unique_path):
                unique_path.append(point)
        
        return np.array(unique_path)

def find_stop_index(trajectory, distance):
    for i in range(1, len(trajectory)):
        pt_to_start_distance = pt_to_pt_distance(trajectory[-i], trajectory[0])
        if pt_to_start_distance >= distance:
            print(i)
            return i

class TrajectoryFollower(Node):
    def __init__(self):
        super().__init__('trajectory_follower')
        

        points = [(38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.5904707688463, 34.442392239849035), (38.72572862224073, 34.41620118659741), (38.94685288046647, 34.37391018104701), (39.25032086380675, 34.31663256399969), (39.63260989254478, 34.24548167625734), (40.09019728696376, 34.16157085862183), (40.61956036734694, 34.06601345189505), (41.217176453977515, 33.95992279687885), (41.8795228671387, 33.84441223437513), (42.6030769271137, 33.72059510518576), (43.38431595418575, 33.589584750112614), (44.21971726863806, 33.452494509957575), (45.105758190753846, 33.310437725522526), (46.038916040816325, 33.164527737609326), (47.015668139108705, 33.01587788701986), (48.032491805914205, 32.86560151455601), (49.085864361516045, 32.71481196101965), (50.172263126197414, 32.56462256721264), (51.28816542024157, 32.41614667393688), (52.430048563931685, 32.27049762199423), (53.594389877551016, 32.12878875218658), (54.777666681382755, 31.992133405315812), (55.97635629571012, 31.861644922183782), (57.18693604081632, 31.73843664359238), (58.405883236984586, 31.623621910343473), (59.62967520449811, 31.51831406323895), (60.85478926364014, 31.42362644308069), (62.07770273469388, 31.34067239067055), (63.29489293794252, 31.270565246810424), (64.50283719366931, 31.214418352302186), (65.69801282215744, 31.173345047947706), (66.87689714369013, 31.148458674548863), (68.0359674785506, 31.140872572907544), (69.17170114702208, 31.151700083825617), (70.28057546938776, 31.182054548104954), (71.35906776593086, 31.23304930654744), (72.40365535693462, 31.305797699954944), (73.41081556268222, 31.401413069129354), (74.3770257034569, 31.52100875487254), (75.29876309954186, 31.66569809798638), (76.17250507122031, 31.836594439272748), (76.99472893877551, 32.03481111953352), (77.76191202249062, 32.261461479570585), (78.47053164264888, 32.5176588601858), (79.11706511953352, 32.80451660218106), (79.69798977342774, 33.12314804635823), (80.20978292461474, 33.47466653351919), (80.64892189337775, 33.860185404465824), (81.011884, 34.280818), (81.011884, 34.280818), (81.32571414809303, 34.72229384295658), (81.62039135800558, 35.16932769242406), (81.89679412512643, 35.62151074358473), (82.1558009448444, 36.07843419162083), (82.39829031254834, 36.53968923171467), (82.62514072362706, 37.004867059048514), (82.8372306734694, 37.473558868804666), (83.03543865746416, 37.94535585616537), (83.22064317100018, 38.41984921631293), (83.39372270946627, 38.89663014442961), (83.55555576825132, 39.3752898356977), (83.70702084274407, 39.855419485299485), (83.84899642833344, 40.33661028841723), (83.98236102040816, 40.818453440233235), (84.10799311435713, 41.30054013592975), (84.22677120556911, 41.78246157068908), (84.33957378943298, 42.2638089396935), (84.44727936133754, 42.744173438125266), (84.55076641667162, 43.22314626116669), (84.65091345082405, 43.700318604000024), (84.74859895918365, 44.175281661807574), (84.84470143713929, 44.64762662977161), (84.94009938007973, 45.116944703074395), (85.03567128339382, 45.582827076898226), (85.13229564247038, 46.04486494642538), (85.23085095269826, 46.502649506838125), (85.3322157094663, 46.95577195331877), (85.43726840816328, 47.403823481049564), (85.54688754417802, 47.84639528521279), (85.66195161289937, 48.283078560990745), (85.78333910971618, 48.713464503565696), (85.91192853001724, 49.13714430811991), (86.0485983691914, 49.55370916983569), (86.19422712262747, 49.96275028389531), (86.34969328571427, 50.36385884548105), (86.51587535384066, 50.75662604977518), (86.69365182239542, 51.14064309195998), (86.8839011867674, 51.515501167217735), (87.08750194234545, 51.88079147073073), (87.30533258451834, 52.23610519768124), (87.53827160867496, 52.581033543251536), (87.78719751020407, 52.915167702623904), (88.05298878449454, 53.23809887098062), (88.3365239269352, 53.54941824350398), (88.63868143291484, 53.848717015376245), (88.96033979782233, 54.1355863817797), (89.30237751704647, 54.40961753789662), (89.66567308597607, 54.6704016789093), (90.05110499999999, 54.91753), (90.05110499999999, 54.91753), (90.45019128222083, 55.15140985506039), (90.8536613393994, 55.37315603331944), (91.26121074241173, 55.58342088296543), (91.67253506213396, 55.782856752186596), (92.08732986944216, 55.97211598917118), (92.50529073521236, 56.15185094210745), (92.92611323032071, 56.32271395918368), (93.34949292564322, 56.4853573885881), (93.77512539205604, 56.64043357850896), (94.20270620043519, 56.78859487713452), (94.63193092165677, 56.93049363265306), (95.0624951265969, 57.06678219325279), (95.49409438613161, 57.19811290712203), (95.92642427113701, 57.325138122448976), (96.35918035248919, 57.44851018742192), (96.7920582010642, 57.56888145022908), (97.22475338773812, 57.68690425905873), (97.65696148338701, 57.80323096209912), (98.08837805888702, 57.918513907538525), (98.51869868511417, 58.03340544356517), (98.9476189329446, 58.14855791836734), (99.37483437325432, 58.26462368013327), (99.80004057691947, 58.38225507705122), (100.22293311481612, 58.50210445730946), (100.64320755782029, 58.62482416909621), (101.06055947680812, 58.751066560599746), (101.47468444265569, 58.88148398000832), (101.88527802623906, 59.0167287755102), (102.29203579843433, 59.15745329529363), (102.69465333011753, 59.30430988754686), (103.09282619216484, 59.457950900458144), (103.48624995545222, 59.61902868221574), (103.87462019085584, 59.78819558100791), (104.25763246925175, 59.96610394502291), (104.63498236151604, 60.153406122448985), (105.00636543852477, 60.35075446147438), (105.37147727115402, 60.55880131028738), (105.7300134302799, 60.77819901707622), (106.08166948677847, 61.009599930029154), (106.4261410115258, 61.25365639733444), (106.763123575398, 61.51102076718034), (107.09231274927114, 61.7823453877551), (107.41340410402128, 62.06828260724697), (107.72609321052452, 62.36948477384422), (108.03007563965694, 62.68660423573511), (108.32504696229464, 63.020293341107866), (108.61070274931363, 63.37120443815077), (108.88673857159007, 63.73998987505206), (109.15285, 64.127302), (109.15285, 64.127302), (109.40608467373288, 64.52467043311036), (109.64397609456941, 64.92293475517853), (109.86695046400736, 65.3217122554123), (110.07543398354429, 65.72062022301931), (110.2698528546779, 66.11927594720738), (110.45063327890587, 66.51729671718417), (110.61820145772597, 66.91429982215745), (110.77298359263574, 67.3099025513349), (110.91540588513291, 67.7037221939243), (111.04589453671514, 68.09537603913334), (111.16487574888014, 68.48448137616978), (111.27277572312555, 68.87065549424133), (111.37002066094908, 69.25351568255573), (111.4570367638484, 69.6326792303207), (111.53425023332117, 70.00776342674396), (111.60208727086504, 70.37838556103326), (111.66097407797773, 70.74416292239628), (111.71133685615688, 71.1047128000408), (111.75360180690019, 71.45965248317454), (111.78819513170531, 71.80859926100518), (111.81554303206995, 72.1511704227405), (111.83607170949179, 72.48698325758826), (111.85020736546846, 72.81565505475609), (111.85837620149769, 73.1368031034518), (111.86100441907709, 73.45004469288307), (111.85851821970437, 73.75499711225764), (111.85134380487722, 74.05127765078326), (111.83990737609331, 74.33850359766765), (111.8246351348503, 74.6162922421185), (111.80595328264583, 74.8842608733436), (111.78428802097766, 75.14202678055062), (111.7600655513434, 75.38920725294733), (111.73371207524076, 75.62541957974145), (111.70565379416739, 75.85028105014067), (111.676316909621, 76.06340895335278), (111.6461276230992, 76.26442057858546), (111.61551213609974, 76.45293321504646), (111.58489665012027, 76.6285641519435), (111.55470736665845, 76.7909306784843), (111.52537048721197, 76.93965008387663), (111.49731221327848, 77.07433965732815), (111.47095874635568, 77.19461668804666), (111.44673628794125, 77.30009846523983), (111.42507103953284, 77.39040227811542), (111.40638920262815, 77.46514541588115), (111.39111697872485, 77.52394516774474), (111.3796805693206, 77.56641882291392), (111.37250617591309, 77.59218367059644), (111.37002, 77.600857), (111.37002, 77.600857), (111.26560081632653, 77.84450177551021), (111.16118163265305, 78.08814655102042), (111.05676244897958, 78.33179132653062), (110.95234326530611, 78.57543610204083), (110.84792408163266, 78.81908087755103), (110.74350489795918, 79.06272565306124), (110.63908571428571, 79.30637042857143), (110.53466653061224, 79.55001520408163), (110.43024734693877, 79.79365997959184), (110.3258281632653, 80.03730475510204), (110.22140897959183, 80.28094953061225), (110.11698979591836, 80.52459430612245), (110.0125706122449, 80.76823908163266), (109.90815142857143, 81.01188385714286), (109.80373224489796, 81.25552863265307), (109.69931306122449, 81.49917340816327), (109.59489387755102, 81.74281818367348), (109.49047469387754, 81.98646295918368), (109.38605551020407, 82.23010773469387), (109.2816363265306, 82.47375251020408), (109.17721714285715, 82.71739728571428), (109.07279795918367, 82.96104206122449), (108.9683787755102, 83.2046868367347), (108.86395959183673, 83.4483316122449), (108.75954040816326, 83.6919763877551), (108.65512122448979, 83.93562116326531), (108.55070204081632, 84.17926593877552), (108.44628285714285, 84.42291071428572), (108.34186367346939, 84.66655548979593), (108.23744448979592, 84.91020026530612), (108.13302530612245, 85.15384504081632), (108.02860612244898, 85.39748981632653), (107.9241869387755, 85.64113459183673), (107.81976775510203, 85.88477936734694), (107.71534857142856, 86.12842414285714), (107.61092938775509, 86.37206891836735), (107.50651020408164, 86.61571369387755), (107.40209102040816, 86.85935846938776), (107.2976718367347, 87.10300324489796), (107.19325265306122, 87.34664802040817), (107.08883346938775, 87.59029279591837), (106.98441428571428, 87.83393757142858), (106.87999510204081, 88.07758234693878), (106.77557591836734, 88.32122712244897), (106.67115673469388, 88.56487189795918), (106.56673755102041, 88.80851667346938), (106.46231836734694, 89.05216144897959), (106.35789918367347, 89.2958062244898), (106.25348, 89.539451), (106.25348, 89.539451), (105.24409459183673, 89.54989291836735), (104.23470918367346, 89.5603348367347), (103.2253237755102, 89.57077675510205), (102.21593836734694, 89.5812186734694), (101.20655295918367, 89.59166059183673), (100.1971675510204, 89.60210251020408), (99.18778214285715, 89.61254442857143), (98.17839673469388, 89.62298634693877), (97.16901132653061, 89.63342826530612), (96.15962591836734, 89.64387018367347), (95.15024051020409, 89.65431210204082), (94.14085510204082, 89.66475402040817), (93.13146969387755, 89.67519593877552), (92.12208428571428, 89.68563785714286), (91.11269887755103, 89.6960797755102), (90.10331346938776, 89.70652169387755), (89.09392806122449, 89.7169636122449), (88.08454265306122, 89.72740553061224), (87.07515724489795, 89.7378474489796), (86.0657718367347, 89.74828936734694), (85.05638642857143, 89.75873128571429), (84.04700102040816, 89.76917320408164), (83.03761561224489, 89.77961512244899), (82.02823020408164, 89.79005704081634), (81.01884479591837, 89.80049895918367), (80.0094593877551, 89.81094087755102), (79.00007397959183, 89.82138279591837), (77.99068857142856, 89.83182471428572), (76.9813031632653, 89.84226663265306), (75.97191775510204, 89.85270855102041), (74.96253234693877, 89.86315046938776), (73.95314693877552, 89.87359238775511), (72.94376153061225, 89.88403430612246), (71.93437612244898, 89.89447622448981), (70.92499071428571, 89.90491814285714), (69.91560530612244, 89.91536006122449), (68.90621989795918, 89.92580197959184), (67.8968344897959, 89.93624389795919), (66.88744908163265, 89.94668581632654), (65.8780636734694, 89.95712773469388), (64.86867826530613, 89.96756965306123), (63.859292857142854, 89.97801157142858), (62.849907448979586, 89.98845348979593), (61.84052204081633, 89.99889540816328), (60.83113663265306, 90.00933732653061), (59.821751224489795, 90.01977924489796), (58.812365816326526, 90.03022116326531), (57.802980408163265, 90.04066308163266), (56.793594999999996, 90.051105), (56.793594999999996, 90.051105), (56.76311294759836, 90.01865285638635), (56.673336801528265, 89.92275768532669), (56.52677157849196, 89.7656113764928), (56.32592229519163, 89.54940581955648), (56.07329396832952, 89.27633290418959), (55.77139161460785, 88.94858452006393), (55.42272025072887, 88.56835255685135), (55.02978489339477, 88.1378289042236), (54.59509055930778, 87.65920545185257), (54.12114226517012, 87.13467408941003), (53.61044502768404, 86.56642670656784), (53.06550386355173, 85.9566551929978), (52.48882378947547, 85.30755143837177), (51.88290982215743, 84.62130733236152), (51.25026697829986, 83.90011476463891), (50.593400274604974, 83.1461656248757), (49.914814727774996, 82.36165180274376), (49.21701535451215, 81.54876518791491), (48.502507171518666, 80.70969767006095), (47.77379519549677, 79.8466411388537), (47.03338444314868, 78.96178748396503), (46.28377993117664, 78.05732859506669), (45.527486676282834, 77.13545636183055), (44.76700969516953, 76.1983626739284), (44.00485400453892, 75.24823942103207), (43.24352462109324, 74.28727849281337), (42.48552656153473, 73.31767177894415), (41.7333648425656, 72.34161116909623), (40.989544480888064, 71.36128855294139), (40.256570493204364, 70.37889582015148), (39.53694789621672, 69.39662486039832), (38.833181706627336, 68.41666756335371), (38.14777694113847, 67.4412158186895), (37.483238616452326, 66.4724615160775), (36.842071749271135, 65.51259654518952), (36.22678135629712, 64.56381279569739), (35.6398724542325, 63.62830215727291), (35.08385005977951, 62.708256519587934), (34.56121918964037, 61.80586777231427), (34.0744848605173, 60.92332780512373), (33.62615208911252, 60.06282850768814), (33.218725892128276, 59.226561769679314), (32.85471128626677, 58.416719480769075), (32.53661328823024, 57.635493530629255), (32.26693691472091, 56.88507580893167), (32.04818718244099, 56.167658205348125), (31.882869108092713, 55.48543260955045), (31.773487708378305, 54.84059091121048), (31.722547999999996, 54.23532500000001), (31.722547999999996, 54.23532500000001), (31.700417493170352, 53.656943018682696), (31.675921134867266, 53.09118179835784), (31.649250280614368, 52.53787607752724), (31.62059628593528, 51.9968605946927), (31.590150506353638, 51.467970088356054), (31.558104297393086, 50.9510392970191), (31.524649014577268, 50.4459029591837), (31.489976013429782, 49.95239581335159), (31.454276649474284, 49.47035259802465), (31.4177422782344, 48.99960805170466), (31.380564255233782, 48.539996912893436), (31.342933935996047, 48.09135392009283), (31.305042676044838, 47.65351381180461), (31.26708183090379, 47.22631132653063), (31.229242756096525, 46.80958120277267), (31.19171680714668, 46.403158179032566), (31.1546953395779, 46.00687699381212), (31.1183697089138, 45.620572385613144), (31.08293127067803, 45.244079092937476), (31.04857138039422, 44.877231854286904), (31.015481393586004, 44.51986540816327), (30.98385266577701, 44.171814493068375), (30.953876552490883, 43.832913847504024), (30.925744409251248, 43.50299820997205), (30.899647591581733, 43.181902318974245), (30.87577745500599, 42.869460913012446), (30.854325355047635, 42.56550873058845), (30.835482647230318, 42.269880510204096), (30.81944068707766, 41.982410990361174), (30.8063908301133, 41.702934909561506), (30.796524431860874, 41.43128700630691), (30.790032847844003, 41.167302019099196), (30.787107433586343, 40.91081468644019), (30.78793954461151, 40.66165974683169), (30.79272053644315, 40.41967193877552), (30.80164176460488, 40.184686000773496), (30.814894584620347, 39.95653667132744), (30.83267035201319, 39.73505868893915), (30.85516042230703, 39.52008679211045), (30.882556151025504, 39.311455719343144), (30.91504889369225, 39.10900020913907), (30.952830005830904, 38.91255500000001), (30.99609084296509, 38.721954830427805), (31.045022760618444, 38.537034438924266), (31.09981711431461, 38.35762856399121), (31.160665259577215, 38.183571944130435), (31.227758551929888, 38.014699317843764), (31.301288346896275, 37.850845423633025), (31.381445999999997, 37.691845000000015), (31.381445999999997, 37.691845000000015), (31.47043493777252, 37.53755018138701), (31.569983219797866, 37.387882685998186), (31.679568967505038, 37.24278162797816), (31.798670302323007, 37.10218612147151), (31.926765345680792, 36.96603528062288), (32.06333221900738, 36.834268219576884), (32.207849043731784, 36.706824052478154), (32.35979394128297, 36.583641893471274), (32.51864503308995, 36.46466085670088), (32.683880440581724, 36.34982005631158), (32.854978285187286, 36.23905860644801), (33.03141668833564, 36.13231562125476), (33.21267377145577, 36.029530214876466), (33.39822765597667, 35.93064150145774), (33.58755646332736, 35.8355885951432), (33.7801383149368, 35.74431061007745), (33.975451332234016, 35.656746660405126), (34.17297363664799, 35.572835860270814), (34.37218334960773, 35.49251732381917), (34.572558592542215, 35.41573016519478), (34.773577486880455, 35.34241349854228), (34.97471815405145, 35.27250643800628), (35.17545871548419, 35.2059480977314), (35.37527729260767, 35.142677591862245), (35.573652006850885, 35.082634034543446), (35.77006097964283, 35.025756539919605), (35.96398233241251, 34.97198422213535), (36.15489418658892, 34.921256195335296), (36.342274663601046, 34.87351157366405), (36.525601884877894, 34.82868947126624), (36.70435397184846, 34.78672900228648), (36.87800904594174, 34.74756928086937), (37.04604522858673, 34.71114942115956), (37.20794064121242, 34.677408537301645), (37.36317340524781, 34.646285743440245), (37.5112216421219, 34.61772015371997), (37.65156347326369, 34.59165088228546), (37.78367702010216, 34.5680170432813), (37.90704040406633, 34.54675775085212), (38.02113174658518, 34.527812119142546), (38.12542916908771, 34.511119262297186), (38.219410793002915, 34.49661829446066), (38.30255473975979, 34.48424832977757), (38.374339130787334, 34.47394848239255), (38.434242087514555, 34.465657866450215), (38.481741731370434, 34.45931559609518), (38.51631618378397, 34.45486078547205), (38.53744356618415, 34.452232548725455), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.45137000000001), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.451370000000004), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.544602, 34.45137), (38.5904707688463, 34.442392239849035), (38.72572862224073, 34.41620118659741), (38.94685288046647, 34.37391018104701), (39.25032086380675, 34.31663256399969)]

        self.trajectory = convert_to_array(points)

        self.original_trajectory_length = len(self.trajectory)

        self.stop_index = find_stop_index(self.trajectory, 1.0)

        self.current_index = 0
        
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.plan_pub = self.create_publisher(Path, '/plan', 10)
        
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)
        
        self.timer = self.create_timer(0.1, self.control_loop)

        self.publish_plan()
        self.publish_plan()
        self.publish_plan()
        self.publish_plan()
        self.publish_plan()
        
        
    
    def publish_plan(self):
        path_msg = Path()
        path_msg.header.stamp = self.get_clock().now().to_msg()
        path_msg.header.frame_id = 'odom'
        
        for point in self.trajectory:
            pose = PoseStamped()
            pose.header = path_msg.header
            pose.pose.position.x = float(point[0])
            pose.pose.position.y = float(point[1])
            pose.pose.orientation.w = 1.0
            path_msg.poses.append(pose)
        
        self.plan_pub.publish(path_msg)
    
    def get_robot_position(self):
        try:
            transform = self.tf_buffer.lookup_transform('odom', 'base_footprint', rclpy.time.Time())
            return np.array([transform.transform.translation.x, transform.transform.translation.y]), math.degrees(2 * math.atan2(transform.transform.rotation.z, transform.transform.rotation.w))
        except tf2_ros.LookupException:
            self.get_logger().warning('Could not get transform from map to base_link')
            return None, None
    
    def pure_pursuit_step(self, path, currentPos, currentHeading, lookAheadDis, LFindex):

        currentX = currentPos[0]
        currentY = currentPos[1]
        lastFoundIndex = LFindex
        
        for i in range(lastFoundIndex, len(path) - 1):
            x1, y1 = path[i][0] - currentX, path[i][1] - currentY
            x2, y2 = path[i+1][0] - currentX, path[i+1][1] - currentY
            dx, dy = x2 - x1, y2 - y1
            dr = math.sqrt(dx**2 + dy**2)
            D = x1 * y2 - x2 * y1
            discriminant = (lookAheadDis**2) * (dr**2) - D**2
            
            if discriminant >= 0:
                sol_x1 = (D * dy + sgn(dy) * dx * math.sqrt(discriminant)) / dr**2 + currentX
                sol_y1 = (-D * dx + abs(dy) * math.sqrt(discriminant)) / dr**2 + currentY
                sol_x2 = (D * dy - sgn(dy) * dx * math.sqrt(discriminant)) / dr**2 + currentX
                sol_y2 = (-D * dx - abs(dy) * math.sqrt(discriminant)) / dr**2 + currentY
                
                minX, maxX = min(path[i][0], path[i+1][0]), max(path[i][0], path[i+1][0])
                minY, maxY = min(path[i][1], path[i+1][1]), max(path[i][1], path[i+1][1])
                
                if (minX <= sol_x1 <= maxX and minY <= sol_y1 <= maxY) or (minX <= sol_x2 <= maxX and minY <= sol_y2 <= maxY):
                    if (minX <= sol_x1 <= maxX and minY <= sol_y1 <= maxY) and (minX <= sol_x2 <= maxX and minY <= sol_y2 <= maxY):
                        goalPt = [sol_x1, sol_y1] if pt_to_pt_distance([sol_x1, sol_y1], path[i+1]) < pt_to_pt_distance([sol_x2, sol_y2], path[i+1]) else [sol_x2, sol_y2]
                    else:
                        goalPt = [sol_x1, sol_y1] if (minX <= sol_x1 <= maxX and minY <= sol_y1 <= maxY) else [sol_x2, sol_y2]
                    
                    if pt_to_pt_distance(goalPt, path[i+1]) < pt_to_pt_distance([currentX, currentY], path[i+1]):
                        lastFoundIndex = i
                        break
                    else:
                        lastFoundIndex = i+1
                else:
                    goalPt = [path[lastFoundIndex][0], path[lastFoundIndex][1]]
        
        Kp = 3
        absTargetAngle = math.degrees(math.atan2(goalPt[1] - currentY, goalPt[0] - currentX))
        absTargetAngle = absTargetAngle if absTargetAngle >= 0 else absTargetAngle + 360
        turnError = absTargetAngle - currentHeading
        turnError = turnError - 360 if turnError > 180 else (turnError + 360 if turnError < -180 else turnError)
        turnVel = Kp * turnError
        
        return goalPt, lastFoundIndex, turnVel, turnError
    
    def control_loop(self):
        position, heading = self.get_robot_position()
        if position is None:
            return
        
        if self.current_index >= len(self.trajectory)-self.stop_index:
            print(len(self.trajectory))
            print(type(self.trajectory))
            self.trajectory = np.vstack((self.trajectory, self.trajectory[:self.original_trajectory_length]))  # Přidání další kopie trajektorie
            print(len(self.trajectory))
            
            # Pokud je trajektorie více než dvojnásobná, odstraníme první kopii
            if len(self.trajectory) > 2 * self.original_trajectory_length:
                self.trajectory = self.trajectory[self.original_trajectory_length:]
                self.current_index -= self.original_trajectory_length

        goalPt, self.current_index, turnVel, turn_angle = self.pure_pursuit_step(self.trajectory, position, heading, 0.3, self.current_index)

        
        max_speed = 0.8
        min_speed = 0.01
        max_turn_vel = 1.2
        if abs(turn_angle) >= 90:
            linear_speed = min_speed
        else:
            linear_speed = max_speed * (1 - (abs(turn_angle) / 90))

        if abs(turnVel*math.pi/180) > max_turn_vel:
            turn_vel = max_turn_vel * (turnVel/abs(turnVel))
        else:
            turn_vel = turnVel*math.pi/180

        cmd_vel = Twist()
        cmd_vel.linear.x = linear_speed
        cmd_vel.angular.z = turn_vel
        
        self.cmd_vel_pub.publish(cmd_vel)

def main(args=None):
    rclpy.init(args=args)
    node = TrajectoryFollower()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
