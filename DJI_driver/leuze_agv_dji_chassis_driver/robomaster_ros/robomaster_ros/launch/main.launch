<launch>

  <arg name="name" default="" description="A name used as ROS namespace"/>
  <arg name="model" default="ep" description="The type of robot: ep or s1"/>
  <arg name="with_model_description" default="true" description="Enables publishing the robot model"/>
  <arg name="log_level" default="info" description="ROS logging level"/>
  <!-- CLIENT -->
  <arg name="serial_number" default="" description="The serial number of the robot. Leave empty to ignore it."/>
  <arg name="conn_type" default="sta" description="The type of connection: sta, ap, or rndis"/>
  <arg name="lib_log_level" default="ERROR" description="Robomaster SDK logging level"/>
  <arg name="reconnect" default="true" description="Wait for reconnections"/>

  <arg name="arm" default="$(eval '\'$(var model)\' == \'ep\'')" description="Enable the arm module. Should not be enabled together with the servo module"/>
  <arg name="left_motor_zero" default="1024" description="The arm left servo zero value"/>
  <arg name="right_motor_zero" default="1024" description="The arm right servo zero value"/>
  <arg name="left_motor_angle" default="0.073304" description="The arm left servo zero angle"/>
  <arg name="right_motor_angle" default="-0.274016" description="The arm right servo zero angle"/>
  <arg name="left_motor_direction" default="1" description="The arm left servo direction"/>
  <arg name="right_motor_direction" default="-1" description="The arm right servo direction"/>
  <arg name="left_motor_index" default="0" description="The arm left servo index"/>
  <arg name="right_motor_index" default="1" description="The arm right servo index"/>

  <arg name="arm_rate" default="10" description="The update rate for the arm state"/>

  <arg name="armor" default="false" description="Enable the armor module"/>
  <arg name="armor_sensitivity" default="0.5" description="Armor sensitivity"/>

  <arg name="battery" default="true" description="Enable the battery module"/>

  <arg name="led" default="true" description="Enable the LED module"/>

  <arg name="speaker" default="true" description="Enable the speaker module"/>

  <arg name="blaster" default="$(eval '\'$(var model)\' == \'s1\'')" description="Enable the blaster module"/>

  <arg name="gripper" default="$(eval '\'$(var model)\' == \'ep\'')" description="Enable the gripper module"/>
  <arg name="open_gripper" default="false" description="Whenever to open gripper at initialization"/>

  <arg name="sbus" default="false" description="Enable the sbus module"/>

  <arg name="servo" default="false" description="Enable the servo module. Should not be enabled together with the arm module"/>

  <arg name="tof_0" default="False" description="Enable ToF sensor #0"/>
  <arg name="tof_1" default="False" description="Enable ToF sensor #1"/>
  <arg name="tof_2" default="False" description="Enable ToF sensor #2"/>
  <arg name="tof_3" default="False" description="Enable ToF sensor #3"/>
  <arg name="tof_rate" default="10" description="Update rate for ToF sensors"/>
  <let name="tof"
    value="$(eval '\'$(var tof_0)\' in (\'true\', \'True\') or
                   \'$(var tof_1)\' in (\'true\', \'True\') or
                   \'$(var tof_2)\' in (\'true\', \'True\') or
                   \'$(var tof_3)\' in (\'true\', \'True\')')"/>

  <!-- e.g., marker:red, robot -->
  <arg name="vision_targets" default="[]" description="Enable one or more vision detection"/>
  <let name="vision" value="$(eval 'len($(var vision_targets)) > 0')"/>

  <arg name="sensor_adapter" default="false" description="Enable the sensor adapter module"/>
  <!-- [0, 1, 5, 10, 20, 50] -->
  <arg name="sensor_adapter_rate" default="10" description="Update rate for sensor adapters"/>

  <arg name="uart_baudrate" default="115200" description="UART baudrate"/>
  <arg name="uart_data_bit" default="0" description="UART data bit"/>
  <arg name="uart_odd_even" default="0" description="UART parity"/>
  <arg name="uart_stop_bit" default="0" description="UART stop bit"/>
  <arg name="uart_rx_enable" default="false" description="Enable UART RX"/>
  <arg name="uart_tx_enable" default="false" description="Enable UART TX"/>
  <arg name="uart_rx_size" default="50" description="UART RX buffer size"/>
  <arg name="uart_tx_size" default="50" description="UART TX buffer size"/>
  <let name="uart" value="$(eval '\'$(var uart_rx_enable)\' in (\'true\', \'True\') or \'$(var uart_tx_enable)\' in (\'true\', \'True\')')"/>

  <!-- e.g., <= 0 -> None -->
  <arg name="pwm_frequencies" default="[-1,-1,-1,-1,-1,-1]" description="PWM dfrequencies. Enable the PWM module when at least one is positive."/>
  <let name="pwm" value="$(eval 'max($(var pwm_frequencies)) > 0')"/>

  <!-- CHASSIS -->
  <arg name="chassis" default="true" description="Enables chassis module, see :ros:param:`chassis.enabled` "/>
  <arg name="chassis_rate" default="50" description="Chassis update rate: one of 0, 1, 5, 10, 20, 50. See :ros:param:`chassis.rate`"/>
  <arg name="chassis_status_rate" default="50" description="Chassis status update rate: one of 0, 1, 5, 10, 20, 50. See :ros:param:`chassis.rate`"/>
  <arg name="chassis_timeout" default="0.0" description="Chassis control timeout in seconds. See :ros:param:`chassis.timeout`"/>
  <arg name="chassis_twist_to_wheel_speeds" default="true" description="Enables `cmd_vel` translation to wheel speeds. See :ros:param:`chassis.twist_to_wheel_speeds`"/>
  <arg name="chassis_force_level" default="false" description="Force the state estimation to stay horizontal. See :ros:param:`chassis.force_level`"/>
  <arg name="chassis_odom_twist_in_odom" default="false" description="Select odom frame for :ros:pub:`odom` twist component. See :ros:param:`chassis.odom_twist_in_odom`"/>
  <arg name="chassis_imu_includes_orientation" default="true" description="Include orientation in `imu`. See :ros:param:`chassis.imu_includes_orientation`"/>
  <arg name="chassis_error_linear_velocity" default="0.005" description="State estimation error -- linear velocity. See :ros:param:`chassis.error.linear_velocity.xy`"/>
  <arg name="chassis_error_angular_velocity_xy" default="0.01" description="State estimation error -- non horizontal angular velocity. See :ros:param:`chassis.error.angular_velocity.xy`"/>
  <arg name="chassis_error_angular_velocity_z" default="0.03" description="State estimation error -- horizontal angular velocity. See :ros:param:`chassis.error.angular_velocity.z`"/>
  <arg name="chassis_error_linear_acceleration" default="0.1" description="State estimation error -- linear acceleration. See :ros:param:`chassis.error.linear_acceleration.xyz`"/>

  <arg name="gimbal" default="$(eval '\'$(var model)\' == \'s1\'')" description="Enables gimbal module"/>
  <!-- [0, 1, 5, 10, 20, 50] -->
  <arg name="gimbal_rate" default="10" description="Update rate for gimbal state"/>
  <!-- 0: FREE, 1: GIMBAL_LEAD, 2: CHASSIS_LEAD -->
  <arg name="gimbal_mode" default="2" description="Gimbal-chassis coontrol coupling"/>


  <let name="default_mode" value="$(eval '2 if __import__(\'importlib.util\').util.find_spec(\'rclpy.event_handler\') else 0')"/>

  <arg name="camera" default="true" description="Enables camera module"/>
  <arg name="camera_yaw" default="0.0" description="The camera orientation with respect to the arm"/>

  <arg name="video_resolution" default="360" description="Video resolution: 360, 540 or 720 pixels height"/>
  <arg name="video_rate" default="-1.0" description="The camera maximal fps. A negative rate means no throttling."/>
  <arg name="video_raw" default="$(var default_mode)" description="Enables publishing decoded video stream: OFF=0, ON=1, ON_DEMAND=2"/>
  <arg name="video_h264" default="$(var default_mode)" description="Enables publishing original H264 encoded video stream: OFF=0, ON=1, ON_DEMAND=2"/>
  <arg name="video_ffmpeg" default="$(var default_mode)" description="Enables publishing the original H264 encoded video stream as a image transport [ffmpeg] topic: OFF=0, ON=1, ON_DEMAND=2"/>
  <!-- <arg name="video_compressed" default="false"/> -->
  
  <arg name="audio_raw" default="$(var default_mode)" description="Enables publishing decoded audio stream: OFF=0, ON=1, ON_DEMAND=2"/>
  <arg name="audio_opus" default="$(var default_mode)" description="Enables publishing original OPUS encoded audio stream: OFF=0, ON=1, ON_DEMAND=2"/>
  <arg name="audio_level" default="$(var default_mode)" description="Enables publishing sound level: OFF=0, ON=1, ON_DEMAND=2"/>

  <arg name="camera_calibration_suffix" default="" description="The suffix to append to the camera calibration file"/>
 
  <!-- <arg name="display_battery" default="off"/> -->

  <arg name="camera_calibration_directory" default="$(find-pkg-share robomaster_ros)/config" description="The location of the camera calibration files"/>
  <arg name="camera_calibration_file" default="$(var camera_calibration_directory)/rm_camera_calibration_$(var video_resolution)$(var camera_calibration_suffix).yaml" description="The camera calibration file"/>

  <!-- $(env HOME)/.ros -->

  <group>

  <push-ros-namespace namespace="$(var name)"/>

  <node name="robomaster" pkg="robomaster_ros" exec="robomaster_driver" output="screen"
    args="--ros-args --log-level $(var log_level)">
    <param name="tf_prefix" value="$(var name)"/>
    <param name="serial_number" value="$(var serial_number)"/>
    <param name="conn_type" value="$(var conn_type)"/>
    <param name="lib_log_level" value="$(var lib_log_level)"/>
    <param name="mode" value="$(var gimbal_mode)"/>
    <param name="arm">
      <param name="enabled" value="$(var arm)"/>
      <param name="rate" value="$(var arm_rate)"/>
      <param name="right_motor.zero" value="$(var right_motor_zero)"/>
      <param name="left_motor.zero" value="$(var left_motor_zero)"/>
      <param name="right_motor.direction" value="$(var right_motor_direction)"/>
      <param name="left_motor.direction" value="$(var left_motor_direction)"/>
      <param name="right_motor.angle" value="$(var right_motor_angle)"/>
      <param name="left_motor.angle" value="$(var left_motor_angle)"/>
      <param name="right_motor.index" value="$(var right_motor_index)"/>
      <param name="left_motor.index" value="$(var left_motor_index)"/>
    </param>
    <param name="armor">
      <param name="enabled" value="$(var armor)"/>
      <param name="sensitivity" value="$(var armor_sensitivity)"/>
    </param>
    <param name="battery">
      <param name="enabled" value="$(var battery)"/>
    </param>
    <param name="blaster">
      <param name="enabled" value="$(var blaster)"/>
    </param>
    <param name="camera">
      <param name="enabled" value="$(var camera)"/>
      <param name="video">
        <param name="raw" value="$(var video_raw)"/>
        <param name="h264" value="$(var video_h264)"/>
        <param name="ffmpeg" value="$(var video_ffmpeg)"/>
        <param name="resolution" value="$(var video_resolution)"/>
        <param name="calibration_file" value="$(var camera_calibration_file)"/>
        <param name="rate" value="$(var video_rate)"/>
      </param>
      <param name="audio">
        <param name="raw" value="$(var audio_raw)"/>
        <param name="opus" value="$(var audio_opus)"/>
        <param name="level" value="$(var audio_level)"/>
      </param>
    </param>
    <param name="chassis">
      <param name="enabled" value="$(var chassis)"/>
      <param name="rate" value="$(var chassis_rate)"/>
      <param name="status.rate" value="$(var chassis_status_rate)"/>
      <param name="timeout" value="$(var chassis_timeout)"/>
      <param name="twist_to_wheel_speeds" value="$(var chassis_twist_to_wheel_speeds)"/>
      <param name="force_level" value="$(var chassis_force_level)"/>
      <param name="odom_twist_in_odom" value="$(var chassis_odom_twist_in_odom)"/>
      <param name="imu_includes_orientation" value="$(var chassis_imu_includes_orientation)"/>
      <param name="error">
        <param name="linear_velocity.xy" value="$(var chassis_error_linear_velocity)"/>
        <param name="angular_velocity.x" value="$(var chassis_error_angular_velocity_xy)"/>
        <param name="angular_velocity.z" value="$(var chassis_error_angular_velocity_z)"/>
        <param name="linear_acceleration.xyz" value="$(var chassis_error_linear_acceleration)"/>
      </param>
    </param>
    <param name="gripper">
      <param name="enabled" value="$(var gripper)"/>
      <param name="open" value="$(var open_gripper)"/>
    </param>
    <param name="led">
      <param name="enabled" value="$(var led)"/>
    </param>
    <param name="pwm">
      <param name="enabled" value="$(var pwm)"/>
      <param name="frequencies" value="$(var pwm_frequencies)"/>
    </param>
    <param name="sbus">
      <param name="enabled" value="$(var sbus)"/>
    </param>
    <param name="servo">
      <param name="enabled" value="$(var servo)"/>
      <param name="config" value="$(find-pkg-share robomaster_ros)/config/servos.yaml"/>
    </param>
    <param name="speaker">
      <param name="enabled" value="$(var speaker)"/>
    </param>
    <param name="tof">
      <param name="enabled" value="$(var tof)"/>
      <param name="rate" value="$(var tof_rate)"/>
    </param>
    <param name="uart">
      <param name="enabled" value="$(var uart)"/>
      <param name="data_bit" value="$(var uart_data_bit)"/>
      <param name="odd_even" value="$(var uart_odd_even)"/>
      <param name="stop_bit" value="$(var uart_stop_bit)"/>
      <param name="baudrate" value="$(var uart_baudrate)"/>
      <param name="rx">
        <param name="enabled" value="$(var uart_rx_enable)"/>
        <param name="size" value="$(var uart_rx_size)"/>
      </param>
      <param name="tx">
        <param name="enabled" value="$(var uart_tx_enable)"/>
        <param name="size" value="$(var uart_tx_size)"/>
      </param>
    </param>
    <param name="vision">
      <param name="enabled" value="$(var vision)"/>
      <param name="targets" value="$(var vision_targets)"/>
    </param>
    <param name="gimbal">
      <param name="enabled" value="$(var gimbal)"/>
      <param name="rate" value="$(var gimbal_rate)"/>
    </param>
    <param name="sensor_adapter">
      <param name="enabled" value="$(var sensor_adapter)"/>
      <param name="rate" value="$(var sensor_adapter_rate)"/>
    </param>
  </node>

  <include file="$(find-pkg-share robomaster_description)/launch/main.launch" if="$(var with_model_description)">
    <arg name="name" value="$(var name)"/>
    <arg name="model" value="$(var model)"/>
    <arg name="tof_0" value="$(var tof_0)"/>
    <arg name="tof_1" value="$(var tof_1)"/>
    <arg name="tof_2" value="$(var tof_2)"/>
    <arg name="tof_3" value="$(var tof_3)"/>
    <arg name="camera_yaw" value="$(var camera_yaw)"/>
  </include>

  <!-- <node pkg="image_transport" name="image_compressed" exec="republish" args="raw in:=/camera/image_raw compressed out/compressed:=/camera/image_raw" if="$(var video_compressed)" /> -->

  <!-- <node name="display_battery" pkg="robomaster_ros" exec="display_battery" output="screen"
     if="$(eval '\'$(var display_battery)\' != \'off\' and \'$(var gimbal)\' in (\'true\', \'True\')')">
    <param name='side' value="$(var display_battery)"/>
  </node> -->

  <!-- <push-ros-namespace namespace="camera"/> -->

  <!-- <include file="$(find-pkg-share robomaster_ros)/launch/camera_proc.launch.py" if="$(var video_raw)">
  </include> -->

</group>

</launch>
